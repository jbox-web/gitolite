{"name":"jbox-gitolite","tagline":"A Ruby interface to manage the Gitolite Git backend system, easy ;)","body":"[![GitHub license](https://img.shields.io/github/license/jbox-web/gitolite.svg)](https://github.com/jbox-web/gitolite/blob/devel/LICENSE)\r\n[![Gem](https://img.shields.io/gem/v/jbox-gitolite.svg)](https://rubygems.org/gems/jbox-gitolite)\r\n[![Gem](https://img.shields.io/gem/dv/jbox-gitolite/1.2.6.svg)](https://rubygems.org/gems/jbox-gitolite/versions/1.2.6)\r\n[![Build Status](https://travis-ci.org/jbox-web/gitolite.svg?branch=devel)](https://travis-ci.org/jbox-web/gitolite)\r\n[![Code Climate](https://codeclimate.com/github/jbox-web/gitolite.png)](https://codeclimate.com/github/jbox-web/gitolite)\r\n[![Dependency Status](https://gemnasium.com/jbox-web/gitolite.svg)](https://gemnasium.com/jbox-web/gitolite)\r\n[![Coverage Status](https://coveralls.io/repos/jbox-web/gitolite/badge.png?branch=devel)](https://coveralls.io/r/jbox-web/gitolite?branch=devel)\r\n[![Test Coverage](https://codeclimate.com/github/jbox-web/gitolite/badges/coverage.svg)](https://codeclimate.com/github/jbox-web/gitolite)\r\n\r\nThis gem is designed to provide a Ruby interface to the [Gitolite](https://github.com/sitaramc/gitolite) Git backend system via [gitlab-grit](https://github.com/gitlabhq/grit) gem.\r\n\r\nIt provides these functionalities :\r\n\r\n* SSH Public Keys Management\r\n* Repositories Management\r\n* Gitolite Admin Repository Bootstrapping\r\n\r\n***Please note : this project is not maintained anymore.***\r\n\r\n***You'll find a new implementation of this library here : [gitolite-rugged](https://github.com/jbox-web/gitolite-rugged).***\r\n\r\n## Requirements ##\r\n\r\n* Ruby 1.9.x or 2.0.x\r\n* a working [Gitolite](https://github.com/sitaramc/gitolite) installation\r\n\r\n## Installation ##\r\n\r\n```ruby\r\ngem 'jbox-gitolite', '~> 1.2.6'\r\n```\r\n\r\nthen `bundle install`.\r\n\r\n## Usage\r\n\r\n### Load a gitolite-admin repo\r\n\r\n```ruby\r\nrequire 'gitolite'\r\nga_repo = Gitolite::GitoliteAdmin.new(\"/path/to/gitolite/admin/repo\")\r\n\r\n# or with options :\r\nga_repo = Gitolite::GitoliteAdmin.new(\"/path/to/gitolite/admin/repo\", :config_file => 'example.conf',\r\n                                                                      :debug       => true,\r\n                                                                      :timeout     => 20,\r\n                                                                      :env         => {'GIT_SSH' => '/path/to/script/file'})\r\n```\r\n\r\nThis method can only be called on an existing gitolite-admin repo. If you need to create a new gitolite-admin repo, see \"Bootstrapping\".\r\n\r\n### Configuration Files\r\n\r\n```ruby\r\nconf = ga_repo.config\r\n\r\n# Empty configs can also be initialized\r\nconf2 = Config.init # => defaults to a filename of gitolite.conf\r\nconf2 = Config.init(\"new_config.conf\")\r\n\r\n# Filename is set to whatever the filename was when the config was created\r\nconf.filename # => \"gitolite.conf\"\r\nconf2.filename # => \"new_config.conf\"\r\n\r\n# Filename can be changed via the setter\r\nconf2.filename = \"new_config.conf\"\r\n\r\n# *to_file* will write the config out to the file system using the value of the filename attribute.\r\n# An alternative filename can also be specified\r\nconf.to_file(\"/new/config/path\") # => writes /new/config/path/gitolite.conf\r\nconf.to_file(\"/new/config/path\", \"test.conf\") # => writes /new/config/path/test.conf\r\n```\r\n\r\n### Repo management\r\n\r\n```ruby\r\nrepo = Gitolite::Config::Repo.new(\"AwesomeRepo\")\r\n\r\n# For a list of permissions, see http://sitaramc.github.com/gitolite/conf.html#gitolite\r\nrepo.add_permission(\"RW+\", \"\", \"bob\", \"joe\", \"susan\")\r\n\r\n# Set a git config option to the repo\r\nrepo.set_git_config(\"hooks.mailinglist\", \"gitolite-commits@example.tld\") # => \"gitolite-commits@example.tld\"\r\n\r\n# Unset a git config option from the repo\r\nrepo.unset_git_config(\"hooks.mailinglist\") # => \"gitolite-commits@example.tld\"\r\n\r\n# Set a gitolite option to the repo\r\nrepo.set_gitolite_option(\"mirroring.master\", \"kenobi\") # => \"kenobi\"\r\n\r\n# Remove a gitolite option from the repo\r\nrepo.unset_gitolite_option(\"mirroring.master\") # => \"kenobi\"\r\n\r\n# Add repo to config\r\nconf.add_repo(repo)\r\n\r\n# Delete repo by object\r\nconf.rm_repo(repo)\r\n\r\n# Delete a repo by name\r\nconf.rm_repo(\"AwesomeRepo\")\r\nconf.rm_repo(:AwesomeRepo)\r\n\r\n# Test if repo exists by name\r\nconf.has_repo?('cool_repo') # => false\r\nconf.has_repo?(:cool_repo) # => false\r\n\r\n# Can also pass a Gitolite::Config::Repo object\r\nrepo = Gitolite::Config::Repo.new('cool_repo')\r\nconf.has_repo?(repo) # => true\r\n\r\n# Get a repo object from the config\r\nrepo = conf.get_repo('cool_repo')\r\nrepo = conf.get_repo(:cool_repo)\r\n```\r\n\r\n### SSH Key Management\r\n\r\n```ruby\r\n# Three ways to create keys : manually, from an existing key, or from a string representing a key\r\nkey = Gitolite::SSHKey.new(\"ssh-rsa\", \"big-public-key-blob\", \"email\")\r\nkey2 = Gitolite::SSHKey.from_file(\"/path/to/ssh/key.pub\")\r\n\r\nkey_string = File.read(\"/path/to/ssh/key.pub\")\r\nkey3 = Gitolite::SSHKey.from_string(key_string, \"owner\")\r\n\r\n# Create key with a name #\r\nkey = Gitolite::SSHKey.new(\"ssh-rsa\", \"big-public-key-blob\", \"email\", \"keyname\")\r\nkey2 = Gitolite::SSHKey.from_file(\"/path/to/ssh/key.pub\")\r\n\r\nkey_string = File.read(\"/path/to/ssh/key.pub\")\r\nkey3 = Gitolite::SSHKey.from_string(key_string, \"owner\", \"keyname\")\r\n\r\n# Add the keys\r\nga_repo.add_key(key)\r\nga_repo.add_key(key2)\r\nga_repo.add_key(key3)\r\n\r\n# Remove key2\r\nga_repo.rm_key(key2)\r\n```\r\n\r\n### Save changes ###\r\n\r\n```ruby\r\nga_repo.save(commit_message, :author => 'John Doe <john.doe@example.com>')\r\n```\r\n\r\nWhen this method is called, all changes get written to the file system and commited in git. For the time being, gitolite assumes full control of the gitolite-admin repository.\r\nThis means that any keys in the keydir that are not being tracked will be removed and any human changes to gitolite.conf will be erased.\r\nThe commit message is optional. A generic message is set if missing. Optionally you can pass the author as above.\r\n\r\n### Apply changes ###\r\n\r\n```ruby\r\nga_repo.apply\r\n```\r\n\r\nThis method will push all changes to <tt>origin master</tt>.\r\n\r\n### Save and apply ###\r\n\r\n```ruby\r\nga_repo.save_and_apply(commit_message)\r\n```\r\n\r\nThis method will add files, commit and push all changes to <tt>origin master</tt> in the same transaction.\r\nThe commit message is optional. A generic message is set if missing.\r\n\r\n### Updating remote changes ###\r\n\r\n```ruby\r\n# In order to avoid conflicts, this will perform a reset! by default\r\n# pass :reset => false to disable the reset (Git conflicts will have to be manually fixed)\r\nga_repo.update\r\nga_repo.update(:reset => false)\r\n\r\n# Update while performing a rebase\r\nga_repo.update(:rebase => true)\r\n```\r\n\r\n### Reloading from the file system ###\r\n\r\n```ruby\r\nga_repo.reload!\r\n```\r\n\r\n### Resetting to HEAD, destroying all local changes (including untracked files) ###\r\n\r\n```ruby\r\n# This will also perform a reload!\r\nga_repo.reset!\r\n```\r\n\r\n### Bootstrapping ###\r\n\r\n```ruby\r\nga_repo = GitoliteAdmin.bootstrap(\"/path/to/new/gitolite/repo\")\r\n```\r\n\r\nThis will create the folders <tt>conf</tt> and <tt>keydir</tt> in the supplied path. A config file will also be created in the conf directory.\r\nThe default configuration supplies RW+ permissions to a user named git for a repo named <tt>gitolite-admin</tt>. You can specify an options hash to change some values :\r\n\r\n```ruby\r\nga_repo = GitoliteAdmin.bootstrap(\"/path/to/new/gitolite/repo\", {:user => \"admin\", :perm => \"RW\"})\r\n```\r\n\r\nYou can also pass a message to be used for the initial bootstrap commit :\r\n\r\n```ruby\r\nga_repo = GitoliteAdmin.bootstrap(\"/path/to/new/gitolite/repo\", {:message => \"Bootstrapped new repo\"})\r\n```\r\n\r\nPlease note that while bootstrapping is supported, I highly recommend that the initial gitolite-admin repo be created by gitolite itself.\r\n\r\n## Caveats ##\r\n\r\n### Windows compatibility ###\r\n\r\nThe grit gem (which is used for under-the-hood git operations) does not currently support Windows.  Until it does, gitolite will be unable to support Windows.\r\n\r\n### Group Ordering ###\r\n\r\nWhen the gitolite backend parses the config file, it does so in one pass. Because of this, groups that are modified after being used do not see those changes reflected in previous uses.\r\n\r\nFor example:\r\n\r\n```sh\r\n@groupa = bob joe sue\r\n@groupb = jim @groupa\r\n@groupa = sam\r\n```\r\n\r\nGroup ```b``` will contain the users <tt>jim, bob, joe, and sue</tt>\r\n\r\n## Contribute\r\n\r\nYou can contribute to this plugin in many ways such as :\r\n* Helping with documentation\r\n* Contributing code (features or bugfixes)\r\n* Reporting a bug\r\n* Submitting translations\r\n","google":"UA-36504891-3","note":"Don't delete this file! It's used internally to help with page regeneration."}